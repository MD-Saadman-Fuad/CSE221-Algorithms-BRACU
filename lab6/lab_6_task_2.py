# -*- coding: utf-8 -*-
"""Lab 6 Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CxkmpdB1eF4KqUnxRQ9FYL5vx8XEBn9p
"""

#task 2

import heapq

def dijkstra(graph, start, n):
    distance = [float('inf')] * (n + 1)
    distance[start] = 0
    pq = [(0, start)]

    while pq:
        dist, node = heapq.heappop(pq)

        if dist > distance[node]:
            continue

        for neighbor, weight in graph[node]:
            new_dist = dist + weight
            if new_dist < distance[neighbor]:
                distance[neighbor] = new_dist
                heapq.heappush(pq, (new_dist, neighbor))

    return distance

with open("/content/input2.txt", "r") as txt_input, open("/content/output2.txt", "w") as txt_output:
  N, M = map(int, txt_input.readline().split())
  graph = [[] for i in range(N + 1)]

  for i in range(M):
      u, v, w = map(int, txt_input.readline().split())
      graph[u].append((v, w))
  S, T = map(int, txt_input.readline().split())

  Alice = dijkstra(graph, S, N)
  Bob = dijkstra(graph, T, N)

  min_time = float('inf')
  node = -1
  for i in range(len(Alice)):
    max1=max(Alice[i],Bob[i])
    #print(Alice[i],Bob[i])
    if max1<min_time:
      min_time=max1
      node=i
  #print(node)
  time=None
  if min_time==float('inf'):
    print('Impossible', file = txt_output)
  else:
    if Alice[node]<Bob[node]:
      time=Bob[node]

    else:
      time=Alice[node]
    print("Time ", time, file = txt_output)
    print("Node ", node, file=txt_output)
txt_output.close()