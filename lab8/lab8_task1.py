# -*- coding: utf-8 -*-
"""Lab8 Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11fhDay8mkbEjrXaJYcsGTxJl74LK2EMv
"""

#task1
def findPr(parent, r):
    if parent[r] == r:
        return r
    parent[r] = findPr(parent, parent[r])
    return parent[r]

def union(parent, rank, node1, node2):
    root1 = findPr(parent, node1)
    root2 = findPr(parent, node2)

    if root1 != root2:
        if rank[root1] < rank[root2]:
            root1, root2 = root2, root1

        parent[root2] = root1
        if rank[root1] == rank[root2]:
            rank[root1] += 1

def kruskal(edges, n):
    parent = list(range(n + 1))
    rank = [0] * (n + 1)
    edges.sort(key=lambda x: x[2])
    minCost = 0

    for edge in edges:
        u, v, w = edge
        if findPr(parent, u) != findPr(parent, v):
            minCost += w
            union(parent, rank, u, v)

    return minCost

with open("/content/input1.txt", "r") as txt_input, open("/content/output1.txt", "w") as txt_output:
    N, M = map(int, txt_input.readline().split())
    edges = []

    for i in range(M):
        u, v, w = map(int, txt_input.readline().split())
        edges.append((u, v, w))

    Cost = kruskal(edges, N)
    print(Cost, file = txt_output)


txt_output.close()