# -*- coding: utf-8 -*-
"""Lab 4 Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mm2cEv2CGwr1rVBswaOmfX3d5SWlw5gi
"""

class Queue:
    def __init__(self):
        self.queue = []
    def enqueue(self, elem):
        self.queue.append(elem)
    def dequeue(self):
        temp = self.queue[0]
        self.queue = self.queue[1:]
        return temp
    def peek(self):
        if len(self.queue)!=0:
            return self.queue[0]
        else:
            return None

class Vertex:
    def __init__(self, val):
        self.val = val
        self.list1 = []
        self.colour = 0

txt_input=open('/content/input2.txt', 'r')
txt_output=open('/content/output2.txt', 'w')
n = int(txt_input.readline().rstrip().split()[0])
G = {i: Vertex(i) for i in range(1, n+1)}
Q = Queue()
for i in txt_input:
    u, v = map(int, i.rstrip().split())
    G[u].list1 += [v]
    G[v].list1 += [u]

s = G[1]
s.colour = 1
Q.enqueue(s)

path = ''
while Q.peek():
    queue1 = Q.dequeue()
    path += str(queue1.val) + ' '
    for v in queue1.list1:
        v = G[v]
        if v.colour == 0:
            v.colour = 1
            Q.enqueue(v)
    queue1.colour = 2
print(path, file = txt_output)

txt_output.close()