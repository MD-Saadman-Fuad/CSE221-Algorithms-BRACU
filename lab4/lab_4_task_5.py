# -*- coding: utf-8 -*-
"""LaB 4 Task 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ca_mfqEwiiPaVq17TzF8_X-kejO4qU_h
"""

class Queue:
    def __init__(self):
        self.queue = []
    def enqueue(self, elem):
        self.queue.append(elem)
    def dequeue(self):
        temp = self.queue[0]
        self.queue = self.queue[1:]
        return temp
    def peek(self):
        if len(self.queue)!=0:
            return self.queue[0]
        else:
            return None

class Vertex:
    def __init__(self, val):
        self.val = val
        self.adj = []
        self.parent = None
        self.time = 0
        self.colour = 0


txt_input=open("/content/input5.txt", "r")
txt_output=open("/content/output5.txt","w")
N,M,D = map(int, txt_input.readline().split())
G = {i: Vertex(i) for i in range(1, N+1)}
Q = Queue()

for i in txt_input:
    u, v = map(int, i.rstrip().split())
    G[u].adj += [v]
    G[v].adj += [u]

s = G[1]
s.colour = 1
Q.enqueue(s)
s = G[1]
s.colour = 1
Q.enqueue(s)

while Q.peek():
    queue1 = Q.dequeue()
    for v in queue1.adj:
        v = G[v]
        if v.colour == 0:
            v.colour = 1
            v.parent = queue1
            v.time += queue1.time + 1
            Q.enqueue(v)
    queue1.colour = 2

v = G[D]
print("Time: ", v.time, file=txt_output)

path = [v.val]
while v.parent:
    path.append(v.parent.val)
    v = v.parent
path.reverse()

txt_output.write("Shortest Path: ")
for i in path:
    txt_output.write(f"{i} ")


txt_output.close()