# -*- coding: utf-8 -*-
"""lab5 task 1_a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tyeIi5nFPPgrXxAry0InR6mLP_z22sY
"""

from collections import defaultdict

def dfs(node, graph, visited, result):
    visited[node] = 1
    for neighbor in graph[node]:
        if visited[neighbor] == 0:
            if not dfs(neighbor, graph, visited, result):
                return False
        elif visited[neighbor] == 1:
            return False
    visited[node] = 2
    result.append(node)
    return True

def dfs_sort(n, pre):
    graph = defaultdict(list)
    for A, B in pre:
        graph[A].append(B)

    visited = [0] * (n + 1)
    result = []

    for i in range(1, n + 1):
        if visited[i] == 0:
            if not dfs(i, graph, visited, result):
                return "IMPOSSIBLE"

    return result[::-1]



txt_input=open('/content/input1_a.txt','r')
txt_output=open('/content/output1_a.txt','w')

N, M = map(int, txt_input.readline().strip().split())
pre = [list(map(int, txt_input.readline().split())) for _ in range(M)]


order = dfs_sort(N, pre)
for i in order:
  print(i,end=' ',  file=txt_output)

txt_output.close()

