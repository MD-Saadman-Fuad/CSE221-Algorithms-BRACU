# -*- coding: utf-8 -*-
"""lab 5 Task 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cf-s3KxQnhzvhhzZF5FDQPxsat7hfgOy
"""

#task3 lab 5
def scc(vertices, edges):


    def dfs(v, visited, stack):
        visited[v] = True


        for neighbor in graph[v]:
            if not visited[neighbor]:
                dfs(neighbor, visited, stack)

        stack.append(v)

    def dfsT(v, visited, scc):

        visited[v] = True
        scc.append(v)

        for neighbor in graphT[v]:
            if not visited[neighbor]:
                dfsT(neighbor, visited, scc)

    graph = {i: [] for i in range(1, vertices + 1)}
    graphT = {i: [] for i in range(1, vertices + 1)}

    for ui, vi in edges:
        graph[ui].append(vi)
        graphT[vi].append(ui)

    visited = [False] * (vertices + 1)
    stack = []

    for vertex in range(1, vertices + 1):
        if not visited[vertex]:
            dfs(vertex, visited, stack)

    visited = [False] * (vertices + 1)
    strongly_connected_components = []

    while stack:
        pooped = stack.pop()

        if not visited[pooped]:
            scc = []
            dfsT(pooped, visited, scc)
            strongly_connected_components.append(scc)

    return strongly_connected_components

with open("/content/input3.txt", "r") as txt_input, open("/content/output3.txt", "w") as txt_output:


    vertices, num_edges = map(int, txt_input.readline().split())
    edges = [tuple(map(int, txt_input.readline().split())) for _ in range(num_edges)]

    find_scc = scc(vertices, edges)

    for scc in find_scc:
        print(" ".join(str(v) for v in scc), file=txt_output)

txt_output.close()